var documenterSearchIndex = {"docs":
[{"location":"#Exceptional.jl-Documentation-1","page":"Exceptional.jl Documentation","title":"Exceptional.jl Documentation","text":"","category":"section"},{"location":"#","page":"Exceptional.jl Documentation","title":"Exceptional.jl Documentation","text":"Exceptional\nExceptional.block(func)\nExceptional.return_from(name, value = nothing)\nExceptional.available_restart(name)\nExceptional.invoke_restart(name, args...)\nExceptional.restart_bind(func, restarts...)\nExceptional.error(exception::Exception)\nExceptional.handler_bind(func, handlers...)","category":"page"},{"location":"#Exceptional","page":"Exceptional.jl Documentation","title":"Exceptional","text":"Exceptional signals and handles exceptional situations, including use of restarts.  An exceptional situation occur when a program reaches a point where a planned operation cannot be done.\n\n\n\n\n\n","category":"module"},{"location":"#Main.Exceptional.block-Tuple{Any}","page":"Exceptional.jl Documentation","title":"Main.Exceptional.block","text":"block makes it possible to do a non-local transfer of control. By using block, a named exit point is set.  Calling the return_from function inside the block context make it possible to return values from those named exit points.\n\n\n\n\n\n","category":"method"},{"location":"#Main.Exceptional.return_from","page":"Exceptional.jl Documentation","title":"Main.Exceptional.return_from","text":"return_from works together with the block function. It's telling the block function which value to return, and from which context this value should be returned.\n\n\n\n\n\n","category":"function"},{"location":"#Main.Exceptional.available_restart-Tuple{Any}","page":"Exceptional.jl Documentation","title":"Main.Exceptional.available_restart","text":"available_restart takes a named restarts as input and returns true if this is a possible restart to do.\n\n\n\n\n\n","category":"method"},{"location":"#Main.Exceptional.invoke_restart-Tuple{Any,Vararg{Any,N} where N}","page":"Exceptional.jl Documentation","title":"Main.Exceptional.invoke_restart","text":"invoke_restart finds the registered restart connected to the input argument name. It returns the corresponding restart function with corresponding arguments.\n\n\n\n\n\n","category":"method"},{"location":"#Main.Exceptional.restart_bind-Tuple{Any,Vararg{Any,N} where N}","page":"Exceptional.jl Documentation","title":"Main.Exceptional.restart_bind","text":"restart_bind gives the ability to go back to the place where an exceptional situation happened, from this place a given action called restart can be done to fix the occuring error.\n\n\n\n\n\n","category":"method"},{"location":"#Main.Exceptional.error-Tuple{Exception}","page":"Exceptional.jl Documentation","title":"Main.Exceptional.error","text":"error recives an exception as input. It check the registered handlers, if any of these handlers is the same type as the input exception, or a parent of the input exception, that handler function is called. If none of the handler functions returns a result the incoming error is thrown.\n\n\n\n\n\n","category":"method"},{"location":"#Main.Exceptional.handler_bind-Tuple{Any,Vararg{Any,N} where N}","page":"Exceptional.jl Documentation","title":"Main.Exceptional.handler_bind","text":"handler_bind makes it possible to be notified when an exceptional situation occur. This is done by wrapping a function who could give an exceptional situation within handlers.\n\n\n\n\n\n","category":"method"}]
}
